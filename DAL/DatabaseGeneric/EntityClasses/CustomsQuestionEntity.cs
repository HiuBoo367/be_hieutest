//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using App.Xuatnhapcanh.Dal.HelperClasses;
using App.Xuatnhapcanh.Dal.FactoryClasses;
using App.Xuatnhapcanh.Dal.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace App.Xuatnhapcanh.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'CustomsQuestion'.<br/><br/></summary>
	[Serializable]
	public partial class CustomsQuestionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<CustomsAnswerOptionEntity> _customsAnswerOptions;
		private EntityCollection<CustomsUserAnswerEntity> _customsUserAnswers;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CustomsQuestionEntityStaticMetaData _staticMetaData = new CustomsQuestionEntityStaticMetaData();
		private static CustomsQuestionRelations _relationsFactory = new CustomsQuestionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CustomsAnswerOptions</summary>
			public static readonly string CustomsAnswerOptions = "CustomsAnswerOptions";
			/// <summary>Member name CustomsUserAnswers</summary>
			public static readonly string CustomsUserAnswers = "CustomsUserAnswers";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomsQuestionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomsQuestionEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomsQuestionEntity", InheritanceHierarchyType.None, false, (int)App.Xuatnhapcanh.Dal.EntityType.CustomsQuestionEntity, typeof(CustomsQuestionEntity), typeof(CustomsQuestionEntityFactory), false);
				AddNavigatorMetaData<CustomsQuestionEntity, EntityCollection<CustomsAnswerOptionEntity>>("CustomsAnswerOptions", a => a._customsAnswerOptions, (a, b) => a._customsAnswerOptions = b, a => a.CustomsAnswerOptions, () => new CustomsQuestionRelations().CustomsAnswerOptionEntityUsingQuestionId, typeof(CustomsAnswerOptionEntity), (int)App.Xuatnhapcanh.Dal.EntityType.CustomsAnswerOptionEntity);
				AddNavigatorMetaData<CustomsQuestionEntity, EntityCollection<CustomsUserAnswerEntity>>("CustomsUserAnswers", a => a._customsUserAnswers, (a, b) => a._customsUserAnswers = b, a => a.CustomsUserAnswers, () => new CustomsQuestionRelations().CustomsUserAnswerEntityUsingQuestionId, typeof(CustomsUserAnswerEntity), (int)App.Xuatnhapcanh.Dal.EntityType.CustomsUserAnswerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CustomsQuestionEntity()
		{
		}

		/// <summary> CTor</summary>
		public CustomsQuestionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CustomsQuestionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CustomsQuestionEntity</param>
		public CustomsQuestionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for CustomsQuestion which data should be fetched into this CustomsQuestion object</param>
		public CustomsQuestionEntity(System.String id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for CustomsQuestion which data should be fetched into this CustomsQuestion object</param>
		/// <param name="validator">The custom validator object for this CustomsQuestionEntity</param>
		public CustomsQuestionEntity(System.String id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomsQuestionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CustomsAnswerOption' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomsAnswerOptions() { return CreateRelationInfoForNavigator("CustomsAnswerOptions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CustomsUserAnswer' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomsUserAnswers() { return CreateRelationInfoForNavigator("CustomsUserAnswers"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CustomsQuestionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomsQuestionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomsAnswerOption' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomsAnswerOptions { get { return _staticMetaData.GetPrefetchPathElement("CustomsAnswerOptions", CommonEntityBase.CreateEntityCollection<CustomsAnswerOptionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomsUserAnswer' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomsUserAnswers { get { return _staticMetaData.GetPrefetchPathElement("CustomsUserAnswers", CommonEntityBase.CreateEntityCollection<CustomsUserAnswerEntity>()); } }

		/// <summary>The Content property of the Entity CustomsQuestion<br/><br/></summary>
		/// <remarks>Mapped on  table field: "customs_question"."content".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 4000.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Content
		{
			get { return (System.String)GetValue((int)CustomsQuestionFieldIndex.Content, true); }
			set { SetValue((int)CustomsQuestionFieldIndex.Content, value); }
		}

		/// <summary>The Id property of the Entity CustomsQuestion<br/><br/></summary>
		/// <remarks>Mapped on  table field: "customs_question"."id".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String Id
		{
			get { return (System.String)GetValue((int)CustomsQuestionFieldIndex.Id, true); }
			set { SetValue((int)CustomsQuestionFieldIndex.Id, value); }
		}

		/// <summary>The IsActive property of the Entity CustomsQuestion<br/><br/></summary>
		/// <remarks>Mapped on  table field: "customs_question"."is_active".<br/>Table field type characteristics (type, precision, scale, length): Boolean, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> IsActive
		{
			get { return (Nullable<System.Boolean>)GetValue((int)CustomsQuestionFieldIndex.IsActive, false); }
			set { SetValue((int)CustomsQuestionFieldIndex.IsActive, value); }
		}

		/// <summary>The QuestionType property of the Entity CustomsQuestion<br/><br/></summary>
		/// <remarks>Mapped on  table field: "customs_question"."question_type".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String QuestionType
		{
			get { return (System.String)GetValue((int)CustomsQuestionFieldIndex.QuestionType, true); }
			set { SetValue((int)CustomsQuestionFieldIndex.QuestionType, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomsAnswerOptionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomsAnswerOptionEntity))]
		public virtual EntityCollection<CustomsAnswerOptionEntity> CustomsAnswerOptions { get { return GetOrCreateEntityCollection<CustomsAnswerOptionEntity, CustomsAnswerOptionEntityFactory>("CustomsQuestion", true, false, ref _customsAnswerOptions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomsUserAnswerEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomsUserAnswerEntity))]
		public virtual EntityCollection<CustomsUserAnswerEntity> CustomsUserAnswers { get { return GetOrCreateEntityCollection<CustomsUserAnswerEntity, CustomsUserAnswerEntityFactory>("CustomsQuestion", true, false, ref _customsUserAnswers); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace App.Xuatnhapcanh.Dal
{
	public enum CustomsQuestionFieldIndex
	{
		///<summary>Content. </summary>
		Content,
		///<summary>Id. </summary>
		Id,
		///<summary>IsActive. </summary>
		IsActive,
		///<summary>QuestionType. </summary>
		QuestionType,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace App.Xuatnhapcanh.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomsQuestion. </summary>
	public partial class CustomsQuestionRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomsQuestionEntity and CustomsAnswerOptionEntity over the 1:n relation they have, using the relation between the fields: CustomsQuestion.Id - CustomsAnswerOption.QuestionId</summary>
		public virtual IEntityRelation CustomsAnswerOptionEntityUsingQuestionId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomsAnswerOptions", true, new[] { CustomsQuestionFields.Id, CustomsAnswerOptionFields.QuestionId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CustomsQuestionEntity and CustomsUserAnswerEntity over the 1:n relation they have, using the relation between the fields: CustomsQuestion.Id - CustomsUserAnswer.QuestionId</summary>
		public virtual IEntityRelation CustomsUserAnswerEntityUsingQuestionId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomsUserAnswers", true, new[] { CustomsQuestionFields.Id, CustomsUserAnswerFields.QuestionId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomsQuestionRelations
	{
		internal static readonly IEntityRelation CustomsAnswerOptionEntityUsingQuestionIdStatic = new CustomsQuestionRelations().CustomsAnswerOptionEntityUsingQuestionId;
		internal static readonly IEntityRelation CustomsUserAnswerEntityUsingQuestionIdStatic = new CustomsQuestionRelations().CustomsUserAnswerEntityUsingQuestionId;

		/// <summary>CTor</summary>
		static StaticCustomsQuestionRelations() { }
	}
}
